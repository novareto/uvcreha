Messaging dispatcher
********************

The messaging dispatcher allows a message to be broadcast on the correct
channel, depending on the user's preferences. It is in plain words an
event subscriber that is also an events registry, redistributing messages
that is gets using a computed key based on the user's messaging type choice.

Let's create our base objects:

  >>> from typing import NamedTuple

  >>> class Application(NamedTuple):
  ...     utilities: dict

  >>> class Request(NamedTuple):
  ...     app: Application

  >>> application = Application(utilities={})
  >>> request = Request(app=application)


To show how the messaging works, let's create a user.
By default, the user has no preferences.
The messaging dispatcher will use 'email' as default:

  >>> from uvcreha.app import events
  >>> from uvcreha.events import UserEvent
  >>> from uvcreha.messaging import message_center
  >>> someuser = dict(email='SomeUser@test.com', preferences = {})
  >>> assert message_center.dispatch(
  ...     UserEvent(someuser, request=request)) == 'email'

To allow the testing of the 'email' part of the process, we'll create a
test emailer.

  >>> from unittest.mock import Mock
  >>> from contextlib import contextmanager
  >>> mymock = Mock()
  >>> application.utilities['emailer'] = mymock

By default, the only event the message center listens to is 'UserEvent'.
We will register later on another subscriber to demonstrate, but the
'UserEvent' works like all the other events. Let's see how :

  >>> from uvcreha.events import UserEvent
  >>> events.notify(UserEvent(someuser, request=request))

The event center is notified but there's no specific listener so nothing
really happens. Let's register a messaging subscriber for email and
a specific UserEvent, UserLoggedInEvent:

  >>> from uvcreha.events import UserLoggedInEvent

  >>> @message_center.subscribe('email', UserLoggedInEvent)
  ... def email_messaging(event: UserLoggedInEvent):
  ...    event.request.app.utilities['emailer'](
  ...        'A user logged in and I have an email trigger on it.')

  >>> events.notify(UserLoggedInEvent(someuser, request=request))
  >>> mymock.assert_called_once_with(
  ...     'A user logged in and I have an email trigger on it.')

  >>> mymock.reset_mock()


Notifying the message center with a key that is unknown will do nothing:

  >>> someuser['preferences']['messaging_type'] = 'airmail'
  >>> events.notify(UserLoggedInEvent(someuser, request=request))
  >>> assert not mymock.called


Creating a subscriber for this type is as simple as :

  >>> @message_center.subscribe('airmail', UserLoggedInEvent)
  ... def airmail_sender(event):
  ...     raise NotImplementedError('Could not airmail')

  >>> import pytest
  >>> with pytest.raises(NotImplementedError) as exc:
  ...     events.notify(UserLoggedInEvent(someuser, request))

  >>> assert str(exc.value) == 'Could not airmail'
  >>> assert not mymock.called


Of course, notifying a basic UserEvent won't create a problem:

  >>> events.notify(UserEvent(someuser, request))
